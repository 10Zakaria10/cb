default:
  image: node:lts-alpine3.15

variables:
  # Enabling Feature Flag to use Fast Compression since we are hosting our own runners
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

stages:
  - install
  - build
  - publish

workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^(develop)$/"

# Ideally this job should not be executed if the nodemodule cache exists
# Waiting for a solution to this issue: https://gitlab.com/gitlab-org/gitlab/-/issues/224650
# A partial workaround is to avoid reuploading cache if not updated by using "allow_failure"
install:
  interruptible: true
  stage: install
  script:
    # node_modules exists => cache with key nodemodule+yarn.lock hash exists => node_modules up to date with yarn.lock
    - test -d node_modules/ && { echo "Skipping $CI_JOB_NAME, node_modules already up-to-date."; exit 207; }
    - cp yarn.lock yarn.lock.orig
    - yarn install --cache-folder .yarn --prefer-offline
    # this check is necessary because --frozen-lockfile is buggy: yarn.lock will be updated if a "resolution" requires it
    - cmp -s yarn.lock yarn.lock.orig || { echo "yarn.lock file is not up-to-date, please run a yarn install locally"; exit 1; }
  allow_failure:
    exit_codes: 207
  cache:
    - key: yarncache-$CI_JOB_IMAGE
      paths:
        - .yarn
    - key:
        prefix: nodemodules-$CI_JOB_IMAGE
        files:
          - yarn.lock
      paths:
        - node_modules

build:
  variables:
    NEXT_PUBLIC_BUILD_ID: $CI_JOB_ID
    NEXT_PUBLIC_BUILD_DATE: $CI_JOB_STARTED_AT
    NEXT_PUBLIC_BUILD_SHA: $CI_COMMIT_SHA
  stage: build
  before_script:
    - test -d node_modules/ || yarn install --frozen-lockfile
  script:
    - yarn build:export
  artifacts:
    paths:
      - out
    expire_in: 1 week
  cache:
    - key:
        prefix: nodemodules-$CI_JOB_IMAGE
        files:
          - yarn.lock
      paths:
        - node_modules
      policy: pull
    - key: buildcache-$CI_COMMIT_BRANCH-$CI_JOB_IMAGE
      paths:
        - ./.next/cache

publish:
  stage: publish
  image: docker:latest
  script:
    - echo -n $NEXUS_PASSWORD | docker login -u $NEXUS_USER --password-stdin http://$NEXUS_URL
    - docker build -t $CI_PROJECT_NAME:$CI_PIPELINE_ID .
    - docker tag $CI_PROJECT_NAME:$CI_PIPELINE_ID $NEXUS_URL/$CI_PROJECT_NAME:$CI_PIPELINE_ID
    - docker push $NEXUS_URL/$CI_PROJECT_NAME:$CI_PIPELINE_ID
    - docker logout http://$NEXUS_URL
